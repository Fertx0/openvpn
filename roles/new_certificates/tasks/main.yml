---
- name: Ensure certificate directories exist
  block:
    - name: Ensure keys directory exists
      ansible.builtin.file:
        path: "{{ keys_dir }}"
        state: directory
        mode: '0700'

    - name: Ensure reqs directory exists on CA server
      ansible.builtin.file:
        path: "/tmp/reqs"
        state: directory
        mode: '0750'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
      delegate_to: "{{ ca_server_host }}"
  tags: initialization

- name: Check for existing certificates using stat
  ansible.builtin.stat:
    path: "{{ keys_dir }}/{{ item.name }}.crt"
  loop: "{{ openvpn_users }}"
  when: item.state == "active"
  register: cert_stat_results
  tags: cert_check

- name: Initialize empty certificate list
  ansible.builtin.set_fact:
    users_needing_certs: []
  tags: cert_check

- name: Identify users needing certificates (stat method)
  ansible.builtin.set_fact:
    users_needing_certs: "{{ users_needing_certs + [item.item] }}"
  loop: "{{ cert_stat_results.results }}"
  when: not item.stat.exists
  tags: cert_check

- name: Log certificate requests
  include_role:
    name: logging
  vars:
    log_message: "Certificate needed for user {{ item.name }}"
    log_level: "INFO"
    component: "certificate_issuance"
    log_data:
      user: "{{ item.name }}"
      email: "{{ item.email }}"
      state: "{{ item.state }}"
  loop: "{{ users_needing_certs }}"
  loop_control:
    loop_var: item
  when: users_needing_certs | length > 0
  tags: logging

- name: Clean existing key files
  ansible.builtin.file:
    path: "{{ easyrsa_dir }}/pki/private/{{ item.name }}.key"
    state: absent
  loop: "{{ users_needing_certs }}"
  become: true
  tags: cleanup

- name: Clean existing request files
  ansible.builtin.file:
    path: "{{ easyrsa_dir }}/pki/reqs/{{ item.name }}.req"
    state: absent
  loop: "{{ users_needing_certs }}"
  become: true
  tags: cleanup

- name: Generate certificate requests
  ansible.builtin.expect:
    command: "{{ easyrsa_dir }}/easyrsa gen-req {{ item.name }} nopass"
    responses:
      "Confirm key overwrite: ": "yes"
      "Common Name.*": "{{ item.name }}"
    creates: "{{ easyrsa_dir }}/pki/reqs/{{ item.name }}.req"
  args:
    chdir: "{{ easyrsa_dir }}"
  loop: "{{ users_needing_certs }}"
  tags: cert_generation

- name: Log certificate requests
  include_role:
    name: logging
  vars:
    log_message: "Certificate request generated for user {{ item.name }}"
    log_level: "INFO"
    component: "certificate_issuance"
    log_data:
      username: "{{ item.name }}"
      email: "{{ item.email | default('N/A') }}"
      status: "pending"
  loop: "{{ users_needing_certs }}"
  loop_control:
    loop_var: item
  when: users_needing_certs | length > 0
  tags: logging

- name: Move generated keys to client directory
  ansible.builtin.copy:
    src: "{{ easyrsa_dir }}/pki/private/{{ item.name }}.key"
    dest: "{{ keys_dir }}/"
    remote_src: true
    mode: '0400'
  loop: "{{ users_needing_certs }}"
  tags: file_management

- name: Log key transfer to client directory
  include_role:
    name: logging
  vars:
    log_message: "Key successfully moved to client directory"
    log_level: "INFO"
    component: "certificate_distribution" 
    log_data:
      username: "{{ item.name }}"
      client_dir: "{{ client_configs_dir }}/{{ item.name }}"
      files_moved: "{{ item.files | default(['client.key', 'client.crt']) }}"
  loop: "{{ users_needing_certs }}"
  loop_control:
    loop_var: item
  when: users_needing_certs | length > 0
  tags: logging

- name: Transfer request files to CA server's reqs directory
  ansible.builtin.include_role:
    name: transfer_file
  vars:
    transfer_src: "{{ easyrsa_dir }}/pki/reqs/{{ item.name }}.req"
    transfer_dest_host: "{{ ca_server_host }}"
    transfer_dest_path: "/tmp/reqs/{{ item.name }}.req"  # Changed to /tmp/reqs
    transfer_src_host: "{{ openvpn_server_host }}"
    transfer_dest_user: "{{ ca_server_user }}"
    transfer_file_mode: "0640"  # Added explicit permissions
  loop: "{{ users_needing_certs }}"
  tags: ca_transfer

- name: Log CA server transfer
  include_role:
    name: logging
  vars:
    log_message: "Certificate request forwarded to CA server"
    log_level: "INFO"
    component: "ca_operations"
    log_data:
      username: "{{ item.name }}"
      ca_server: "{{ ca_hostname | default('primary-ca') }}"
      transfer_method: "{{ transfer_method | default('scp') }}"
      request_file: "{{ item.name }}.req"
      verification_hash: "{{ item.request_hash | default('N/A') }}"
  loop: "{{ users_needing_certs }}"
  loop_control:
    loop_var: item
  when: users_needing_certs | length > 0
  tags: logging
